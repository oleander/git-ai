{"<Commit message>":"<Diff content>"}
{"Remove code_interpreter tool requirement from create_assistant function":"diff --git c/src/commit.rs c/src/commit.rs\nindex 2a15f59..333691d 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -109,0 +110 @@ pub struct OpenAIResponse {\n// Create a new assistant\n@@ -116 +116,0 @@ async fn create_assistant(client: &Client<OpenAIConfig>) -> Result<AssistantObje\n  // Ensure that the assistant is created with the code_interpreter tool"}
{"Ensure assistant creation uses code_interpreter tool in commit module":"diff --git c/src/commit.rs c/src/commit.rs\nindex 9cdf289..2a15f59 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -115,0 +116 @@ async fn create_assistant(client: &Client<OpenAIConfig>) -> Result<AssistantObje\n  // Ensure that the assistant is created with the code_interpreter tool"}
{"Add Duration import and remove duplicate in hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex c0c3d87..6358a87 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -2,0 +3,2 @@\nuse std::time::Duration;\n\n@@ -7 +8,0 @@ use ai::{commit, config};\nuse std::time::Duration;"}
{"Remove commented code related to config access in fine-tune.rs":"diff --git c/src/bin/fine-tune.rs c/src/bin/fine-tune.rs\nindex 72edc66..9535704 100644\n--- c/src/bin/fine-tune.rs\n+++ c/src/bin/fine-tune.rs\n@@ -21,2 +21,2 @@ fn main() -> Result<()> {\n  let config = repo.config().context(\"Couldn't access repository config\")?;\n  let user_email = config.get_string(\"user.email\").context(\"Couldn't get user email\")?;\n  // let config = repo.config().context(\"Couldn't access repository config\")?;\n  // let user_email = config.get_string(\"user.email\").context(\"Couldn't get user email\")?;"}
{"Remove unused termion::event::Key import from hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex 90328e4..c0c3d87 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -9 +8,0 @@ use ai::commit::Session;\nuse termion::event::Key;"}
{"Reorganize imports and duplicate response handling in hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex eaa6260..90328e4 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -2,0 +3,4 @@\nuse indicatif::{ProgressBar, ProgressStyle};\nuse anyhow::{Context, Result};\nuse git2::{Oid, Repository};\nuse ai::{commit, config};\n@@ -7,2 +9,0 @@ use termion::event::Key;\nuse git2::{Oid, Repository};\nuse anyhow::{Context, Result};\n@@ -10,6 +10,0 @@ use clap::Parser;\nuse indicatif::{ProgressBar, ProgressStyle};\nuse termion::input::TermRead;\nuse termion::raw::IntoRawMode;\nuse tokio::time::sleep;\nuse tokio::signal;\nuse ai::{commit, config};\n@@ -45 +40 @@ async fn main() -> Result<()> {\n    // git ???\n    // git rebase\n@@ -61,0 +57 @@ async fn main() -> Result<()> {\n  // Create a new session from the client\n@@ -63,4 +59,9 @@ async fn main() -> Result<()> {\n  let respomse = commit::generate(patch.to_string(), session.into(), pb.clone().into()).await?;\n  let commit = respomse.response.trim();\n  args.commit_msg_file.write(commit.trim().to_string()).unwrap();\n  respomse.session.save_to_repo(&repo).await.unwrap();\n\n  // If the user has a session, then we can use it to generate the commit message\n  let response = commit::generate(patch.to_string(), session.into(), pb.clone().into()).await?;\n\n  // Write the response to the commit message file\n  args.commit_msg_file.write(response.response.trim().to_string()).unwrap();\n\n  // Save the session to the repository\n  response.session.save_to_repo(&repo).await.unwrap();"}
{"Implement Ctrl+C handler and remove read_input function in hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex 6f0b378..eaa6260 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -54,0 +55,7 @@ async fn main() -> Result<()> {\n  let pb_clone = pb.clone();\n  ctrlc::set_handler(move || {\n    pb_clone.finish_and_clear();\n    console::Term::stdout().show_cursor().expect(\"Failed to show cursor\");\n    std::process::exit(1);\n  })?;\n\n@@ -65,24 +71,0 @@ async fn main() -> Result<()> {\n\nasync fn read_input(pb: ProgressBar) -> tokio::io::Result<i32> {\n  let _stdout = std::io::stdout().into_raw_mode().unwrap();\n  let mut stdin = termion::async_stdin().keys();\n\n  loop {\n    match stdin.next() {\n      // Ctrl+C pressed: exit the program\n      Some(Ok(Key::Ctrl('c'))) => {\n        return Ok(1);\n      },\n\n      // Enter pressed: render empty line before progress bar\n      Some(Ok(Key::Char('\\n'))) => {\n        pb.println(\"\");\n      },\n\n      // Any other key pressed\n      _ => {\n        sleep(Duration::from_millis(50)).await;\n      }\n    }\n  }\n}"}
{"Refactor async logic and cleanup in main function of hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex 13e0513..6f0b378 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -60,7 +59,0 @@ async fn main() -> Result<()> {\n  log::debug!(\"Commit message generated successfully\");\n  let pb1 = pb.clone();\n  tokio::select! {\n    _ = signal::ctrl_c() => {\n      console::Term::stdout().show_cursor().expect(\"Failed to show cursor\");\n      std::process::exit(1);\n    }\n@@ -68,7 +61 @@ async fn main() -> Result<()> {\n    _ = read_input(pb1.clone()) => {\n      pb1.finish_and_clear();\n    }\n  }\n\n  log::debug!(\"Commit message generated successfully\");\n  pb1.finish_and_clear();\n  pb.finish_and_clear();"}
{"Remove unnecessary newline in hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex 30206de..13e0513 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -60 +60 @@ async fn main() -> Result<()> {\n\n  log::debug!(\"Commit message generated successfully\");"}
{"Add debug log for successful commit message generation in hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex 03f757c..30206de 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -72,0 +73 @@ async fn main() -> Result<()> {\n  log::debug!(\"Commit message generated successfully\");"}
{"Add explicit progress bar finishing and clearing in hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex 3679066..03f757c 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -72,0 +73,2 @@ async fn main() -> Result<()> {\n  pb1.finish_and_clear();"}
{"Initialize env_logger in main function of hook.rs":"diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex f4b2e39..3679066 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -19,0 +20,2 @@ async fn main() -> Result<()> {\n  env_logger::init();"}
{"Add comment explaining session loading from repo in commit.rs":"diff --git c/src/commit.rs c/src/commit.rs\nindex 6d288f7..7b5b312 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -72,0 +73 @@ impl Session {\n  // Load the session from the repository"}
{"Add comment explaining session saving to repo in commit.rs":"diff --git c/src/commit.rs c/src/commit.rs\nindex 722e286..6d288f7 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -90,0 +91 @@ impl Session {\n  // Save the session to the repository"}
{"Add hook binary existence check in install.rs":"diff --git c/src/install.rs c/src/install.rs\nindex 642c02b..04c3094 100644\n--- c/src/install.rs\n+++ c/src/install.rs\n@@ -43,0 +44 @@ pub fn run() -> Result<(), InstallError> {\n  // Check if the hook binary exists"}
{"Update hook.rs to count tokens and verify they stay within file limit":"diff --git c/src/hook.rs c/src/hook.rs\nindex a327595..81f9268 100644\n--- c/src/hook.rs\n+++ c/src/hook.rs\n@@ -93 +93,3 @@ impl PatchDiff for Diff<'_> {\n      if *tokens + content.len() <= tokens_per_file {\n      let curr_tokens = content.to_utf8().split_whitespace().count();\n      if *tokens + curr_tokens < tokens_per_file {\n        *tokens += curr_tokens;\n@@ -95 +96,0 @@ impl PatchDiff for Diff<'_> {\n        *tokens += content.to_utf8().split_whitespace().count();"}
{"Refactor code by combining operations into one-liners":"diff --git c/src/bin/fine-tune.rs c/src/bin/fine-tune.rs\nindex 58f3f1b..69cd2b2 100644\n--- c/src/bin/fine-tune.rs\n+++ c/src/bin/fine-tune.rs\ndiff --git c/src/config.rs c/src/config.rs\nindex 3ebe375..3f67bed 100644\n--- c/src/config.rs\n+++ c/src/config.rs\n@@ -83,5 +83 @@ pub fn run(args: &ArgMatches) -> Result<()> {\n      app.openai_api_key = args\n        .get_one::<String>(\"<VALUE>\")\n        .context(\"Failed to parse openai-api-key\")?\n        .clone()\n        .into();\n      app.openai_api_key = args.get_one::<String>(\"<VALUE>\").context(\"Failed to parse openai-api-key\")?.clone().into();\ndiff --git c/src/examples.rs c/src/examples.rs\nindex f7b0f52..7323fc4 100644\n--- c/src/examples.rs\n+++ c/src/examples.rs\n@@ -22,6 +22 @@ impl RepositoryExt for Repository {\n    Ok(\n      revwalk\n        .take(max_commits)\n        .map(move |id| self.find_commit(id.unwrap()).expect(\"Failed to find commit\"))\n        .collect()\n    )\n    Ok(revwalk.take(max_commits).map(move |id| self.find_commit(id.unwrap()).expect(\"Failed to find commit\")).collect())\ndiff --git c/src/hook.rs c/src/hook.rs\nindex d84b194..a327595 100644\n--- c/src/hook.rs\n+++ c/src/hook.rs\n@@ -44,6 +44 @@ impl DiffDeltaPath for git2::DiffDelta<'_> {\n    self\n      .new_file()\n      .path()\n      .or_else(|| self.old_file().path())\n      .map(PathBuf::from)\n      .unwrap_or_default()\n    self.new_file().path().or_else(|| self.old_file().path()).map(PathBuf::from).unwrap_or_default()\n@@ -141,3 +136 @@ impl<'a> PatchRepository for Repository {\n    self\n      .diff_tree_to_index(tree.as_ref(), None, Some(&mut opts))\n      .context(\"Failed to get diff\")\n    self.diff_tree_to_index(tree.as_ref(), None, Some(&mut opts)).context(\"Failed to get diff\")\ndiff --git c/src/main.rs c/src/main.rs\nindex 6e57fe9..8908627 100644\n--- c/src/main.rs\n+++ c/src/main.rs\n@@ -25,16 +25,6 @@ fn cli() -> Command {\n          .subcommand(\n            Command::new(\"model\").about(\"Sets the model to use\").arg(\n              Arg::new(\"<VALUE>\")\n                .required(true)\n                .index(1)\n                .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            )\n          )\n          .subcommand(\n            Command::new(\"language\").about(\"Sets the language to use\").arg(\n              Arg::new(\"<VALUE>\")\n                .required(true)\n                .index(1)\n                .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            )\n          )\n          .subcommand(Command::new(\"model\").about(\"Sets the model to use\").arg(\n            Arg::new(\"<VALUE>\").required(true).index(1).value_parser(clap::builder::NonEmptyStringValueParser::new())\n          ))\n          .subcommand(Command::new(\"language\").about(\"Sets the language to use\").arg(\n            Arg::new(\"<VALUE>\").required(true).index(1).value_parser(clap::builder::NonEmptyStringValueParser::new())\n          ))\n@@ -44,6 +34 @@ fn cli() -> Command {\n              .arg(\n                Arg::new(\"max-diff-tokens\")\n                  .required(true)\n                  .index(1)\n                  .value_parser(clap::value_parser!(usize))\n              )\n              .arg(Arg::new(\"max-diff-tokens\").required(true).index(1).value_parser(clap::value_parser!(usize)))\n@@ -56,8 +41,3 @@ fn cli() -> Command {\n          .subcommand(\n            Command::new(\"openai-api-key\").about(\"Sets the OpenAI API key\").arg(\n              Arg::new(\"<VALUE>\")\n                .required(true)\n                .index(1)\n                .value_parser(clap::builder::NonEmptyStringValueParser::new())\n            )\n          )\n          .subcommand(Command::new(\"openai-api-key\").about(\"Sets the OpenAI API key\").arg(\n            Arg::new(\"<VALUE>\").required(true).index(1).value_parser(clap::builder::NonEmptyStringValueParser::new())\n          ))\ndiff --git c/tests/common.rs c/tests/common.rs\nindex 465b80e..1d01f7f 100644\n--- c/tests/common.rs\n+++ c/tests/common.rs\n@@ -71,3 +71 @@ impl GitFile {\n        self\n          .repo\n          .commit(Some(\"HEAD\"), &signature, &signature, \"Commit message\", &tree, &[&parent_commit])?;\n        self.repo.commit(Some(\"HEAD\"), &signature, &signature, \"Commit message\", &tree, &[&parent_commit])?;"}
{"Update hook.rs to asynchronously read file and count tokens in content":"diff --git c/src/hook.rs c/src/hook.rs\nindex 68bddf0..d84b194 100644\n--- c/src/hook.rs\n+++ c/src/hook.rs\n@@ -9,0 +10 @@ use clap::Parser;\nuse tokio::io::AsyncReadExt;\n@@ -99 +100 @@ impl PatchDiff for Diff<'_> {\n        *tokens += content.len();\n        *tokens += content.to_utf8().split_whitespace().count();"}
{"Ignore non rb files":"diff --git c/src/bin/fine-tune.rs c/src/bin/fine-tune.rs\nindex 55578fa..872ca0a 100644\n--- c/src/bin/fine-tune.rs\n+++ c/src/bin/fine-tune.rs\n@@ -68,0 +69,4 @@ fn main() -> Result<()> {\n    if commit.contains(\"[\") && commit.contains(\"]\") {\n      continue;\n    }\n\n@@ -71 +75 @@ fn main() -> Result<()> {\n        { \"role\": \"assistant\", \"content\": commit, \"weight\": weight },\n        { \"role\": \"assistant\", \"content\": commit.trim(), \"weight\": weight },"}
{"Clean up":"diff --git c/src/bin/finetune.rs c/src/bin/finetune.rs\nnew file mode 100644\nindex 0000000..7c7213c\n--- /dev/null\n+++ c/src/bin/finetune.rs\n@@ -0,0 +1,111 @@\nuse std::io::Write;\nuse std::fs::File;\n\nuse git2::{Commit, DiffFormat, DiffOptions, Repository};\nuse anyhow::{Context, Result};\nuse serde_json::json;\n\nstatic PROMPT: &str = \"Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.\";\n\nfn main() -> Result<()> {\n  env_logger::init();\n\n  let max_tokens = 16385;\n  let file_name = \"file-tune.json\";\n  let max_commits = 100;\n\n  let mut opts = DiffOptions::new();\n  opts\n    .ignore_whitespace_change(true)\n    .recurse_untracked_dirs(false)\n    .recurse_ignored_dirs(false)\n    .ignore_whitespace_eol(true)\n    .ignore_blank_lines(true)\n    .include_untracked(false)\n    .ignore_whitespace(true)\n    .indent_heuristic(false)\n    .ignore_submodules(true)\n    .include_ignored(false)\n    .interhunk_lines(0)\n    .context_lines(0)\n    .patience(true)\n    .minimal(true);\n\n  log::info!(\"Creating fine-tune file with {} commits and {} tokens\", max_commits, max_tokens);\n\n  let repo = Repository::open(\".\").context(\"Failed to open git repository\")?;\n  let config = repo.config().context(\"Couldn't access repository config\")?;\n  let user_email = config.get_string(\"user.email\").context(\"Couldn't get user email\")?;\n  let mut revwalk = repo.revwalk().context(\"Failed to create Revwalk\")?;\n  let mut file = File::create(file_name).context(\"Failed to create file\")?;\n\n  file.write_all(b\"\").context(\"Failed to write to file\")?;\n\n  revwalk.push_head().expect(\"Failed to push head\");\n\n  let mut curr_size = 0;\n  let mut commit_count = 0;\n\n  for oid in revwalk.take(max_commits) {\n    let oid = oid.context(\"Failed to get oid\")?;\n    let commit = repo.find_commit(oid).context(\"Couldn't find commit\")?;\n    let commit = if commit.author().email() == Some(&user_email) {\n      commit\n    } else if commit.committer().email() == Some(&user_email) {\n      commit\n    } else {\n      continue;\n    };\n\n    let Some(content) = generate_commit_diff(&repo, &commit, &opts) else {\n      continue;\n    };\n\n    let Some(commit) = commit.message() else {\n      continue;\n    };\n\n    let message = json!({\n      \"messages\": [\n        { \"role\": \"assistant\", \"content\": commit },\n        { \"role\": \"user\", \"content\": content },\n        { \"role\": \"system\", \"content\": PROMPT }\n      ]\n    });\n\n    let content = serde_json::to_string_pretty(&message)?;\n    curr_size += content.split_whitespace().count();\n\n    if curr_size > max_tokens {\n      log::warn!(\"Max tokens reached: {}\", max_tokens);\n      break;\n    }\n\n    commit_count += 1;\n    file.write_all(content.as_bytes()).context(\"Failed to write to file\")?;\n  }\n\n  log::info!(\"File {} created with {} commits\", file_name, commit_count);\n\n  Ok(())\n}\n\nfn generate_commit_diff(repo: &Repository, commit: &Commit, opts: &DiffOptions) -> Result<Option<String>> {\n  let parent = commit.parents().next().unwrap_or_else(|| commit.clone());\n  let tree = commit.tree().expect(\"Couldn't get commit tree\");\n  let parent_tree = parent.tree().expect(\"Couldn't get parent tree\");\n\n  let diff = repo.diff_tree_to_tree(Some(&parent_tree), Some(&tree), Some(&mut opts)).context(\"Failed to get diff\")?;\n\n  let mut patch: Vec<u8> = Vec::new();\n\n  #[rustfmt::skip]\n  diff.print(DiffFormat::Patch, |_, _, line| {\n    let content = line.content();\n    patch.extend_from_slice(content);\n    true\n  }).context(\"Failed to print diff\")?;\n\n  let content = String::from_utf8(patch).context(\"Failed to convert patch to string\")?;\n  if content.split_whitespace().count() > 500 { Ok(None) } else { Ok(Some(content)) }\n}"}

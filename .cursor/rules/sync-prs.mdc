---
description: Sync all open pull requests with origin/main to keep them up-to-date
---

# Sync Open PRs with origin/main

This rule provides a systematic approach to keeping all open pull requests synchronized with the main branch using the Docker-based `just pr` command for isolated testing.

## AI-Assisted Workflow (Recommended)

When the user asks to sync PRs, follow this automated workflow:

### Step 1: Query Open PRs via MCP
Use the GitHub MCP server to get all currently open PRs:
```
mcp_github_list_pull_requests(owner: "oleander", repo: "git-ai", state: "open")
```

### Step 2: Create Todos for Each PR
Create a todo item for each open PR to track progress:
```
todo_write with todos for each PR number found, e.g.:
- "Sync PR #74: [title]" (status: pending)
- "Sync PR #75: [title]" (status: pending)
- etc.
```

### Step 3: Sync Each PR Sequentially
For each PR, run the sync command and update the todo status:
```bash
just sync-pr <PR_NUMBER> "cargo fmt --all && git add -A && git commit --amend --no-edit"
```

Update todo status to `in_progress` before running, then `completed` after success.

### Benefits of AI-Assisted Workflow
- **Always current**: MCP server queries live GitHub data
- **Tracked progress**: Todos show what's completed and what's pending
- **Error handling**: Can pause and resume if a PR fails
- **Visibility**: User can see progress in real-time via todo list
- **No manual updates**: No need to maintain hardcoded PR numbers in Justfile

## Why Sync PRs?

- Prevents merge conflicts from accumulating
- Ensures PRs are tested against the latest codebase
- Makes reviews easier by reducing the delta between PR and main
- Identifies integration issues early
- Uses isolated Docker environments to avoid polluting local git state

## Prerequisites

1. Docker installed and running
2. GitHub CLI (`gh`) installed and authenticated:
   ```bash
   gh auth login
   ```

3. Justfile command runner installed:
   ```bash
   # On macOS
   brew install just
   ```

## Process to Sync All Open PRs

### Quick Start

The simplest way to sync all open PRs at once:

```bash
# Sync all open PRs automatically
just sync-all-prs
```

This command will:
1. Sync each PR with origin/main
2. Auto-format code with `cargo fmt --all`
3. Amend the merge commit with formatting fixes
4. Run `cargo fmt --check` and `cargo check`
5. Force push the updated branch

### Manual Sync Options

For more control, sync PRs individually:

```bash
# Sync a single PR with default behavior
just sync-pr <PR_NUMBER>

# Sync with custom commands (e.g., run tests)
just sync-pr <PR_NUMBER> "cargo fmt --all && cargo test && git add -A && git commit --amend --no-edit"

# Or use the low-level pr command
just pr <PR_NUMBER> "git fetch origin && git merge origin/main --no-edit && cargo fmt --all && cargo check && git push origin --force"
```

### How It Works

The `just pr` command:
- Builds a Docker container with the PR checked out
- Runs commands inside that isolated environment
- Automatically handles GitHub authentication via environment variables
- Uses `git fetch origin` to ensure fresh remote state before merging
- Uses `--force` push for amended commits (safe for PR branches)
- Keeps your local git state completely clean

### Step 3: Handle Merge Conflicts

When conflicts occur, you'll need to resolve them manually:

1. **Checkout the PR branch locally**:
   ```bash
   gh pr checkout <PR_NUMBER>
   ```

2. **Identify conflicting files**:
   ```bash
   git fetch origin main
   git merge origin/main --no-edit
   git status
   ```

3. **Resolve conflicts manually**:
   - Read both versions carefully
   - Understand the intent of each change
   - Combine changes intelligently (don't just pick one side)
   - Remove conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`)

4. **Key principles for conflict resolution**:
   - Preserve new functionality from main
   - Keep PR-specific changes
   - Ensure constants/config changes are consistent
   - Test that the resolution compiles

5. **Complete the merge and test**:
   ```bash
   git add <resolved-files>
   git commit --no-edit
   cargo fmt --all
   cargo check
   git push origin HEAD
   ```

6. **Verify using Docker**:
   ```bash
   # Test the resolved PR in isolated environment
   just pr <PR_NUMBER> "cargo test"
   ```

## Common Conflict Scenarios

### Configuration Constants

When both main and PR modify constants (e.g., `DEFAULT_MODEL`):
- Use the value from main for default behavior
- Keep PR-specific additions (e.g., new constants like `DEFAULT_TEMPERATURE`)
- Ensure visibility (pub vs non-pub) is consistent with usage

Example resolution:
```rust
// Keep main's default value
pub const DEFAULT_MODEL: &str = "gpt-4.1";
// Keep PR's new constant
pub const DEFAULT_TEMPERATURE: f64 = 0.7;
```

### Struct Field Changes

When both branches modify a struct:
- Include all fields from both versions
- Ensure derives are compatible (e.g., `Eq` only if all fields implement it)
- Update corresponding methods to handle all fields

### Import Conflicts

When both branches add imports:
- Keep all necessary imports
- Follow Rust import conventions: std → external → internal
- Remove duplicates
- Alphabetize within groups

## Built-in Sync All Command

The [Justfile](mdc:Justfile) now includes a `sync-all-prs` recipe that automatically syncs all open PRs:

```bash
just sync-all-prs
```

This is the recommended approach as it:
- Is maintained alongside the codebase
- Automatically formats code after merging
- Handles authentication properly
- Uses the same Docker isolation as individual PR syncs

### Dynamic Script Alternative

If you need a more dynamic approach that auto-discovers open PRs:

```bash
#!/bin/bash
# dynamic-sync-prs - Dynamically sync all open PRs

set -e

echo "Fetching open PRs..."
PR_NUMBERS=$(gh pr list --json number --jq '.[].number')

if [ -z "$PR_NUMBERS" ]; then
  echo "No open PRs found"
  exit 0
fi

MAIN_SHA=$(git rev-parse origin/main 2>/dev/null || echo "unknown")
echo "Syncing PRs to main: $MAIN_SHA"
echo ""

SUCCESS=()
CONFLICTS=()

for pr_num in $PR_NUMBERS; do
  echo "=== Syncing PR #$pr_num ==="
  PR_TITLE=$(gh pr view "$pr_num" --json title --jq '.title')
  echo "Title: $PR_TITLE"

  # Use the sync-pr command with auto-formatting
  if just sync-pr "$pr_num" "cargo fmt --all && git add -A && git commit --amend --no-edit"; then
    echo "✓ PR #$pr_num merged successfully"
    SUCCESS+=("$pr_num")
  else
    echo "✗ PR #$pr_num has conflicts"
    echo "  Resolve: gh pr checkout $pr_num && git merge origin/main"
    CONFLICTS+=("$pr_num")
  fi
  echo ""
done

echo "========================================"
echo "Successful: ${#SUCCESS[@]} PRs"
[ ${#CONFLICTS[@]} -gt 0 ] && echo "Conflicts: ${#CONFLICTS[@]} PRs" && exit 1
echo "All PRs synced!"
```

**Note**: The static `sync-all-prs` in the Justfile is simpler and faster (uses Docker caching), but requires manual updates when PRs change.

## Best Practices

1. **Sync regularly**: Update PRs weekly or after significant main branch changes
2. **Use Docker for testing**: The `just pr` command provides isolation and consistency
3. **Review conflicts carefully**: Don't blindly accept one side
4. **Document complex resolutions**: Add comments explaining non-obvious merge decisions
5. **Test in isolation**: After resolving conflicts locally, verify with `just pr <NUM> "cargo test"`
6. **Verify builds**: Always run `cargo check` and `cargo fmt` after resolving conflicts

## Using the `just pr` Command

The `just pr` command is a powerful tool for working with PRs in isolation:

```bash
# Run any command in the PR's Docker environment
just pr <PR_NUMBER> "<command>"

# Examples:
just pr 42 "cargo build"
just pr 42 "cargo test"
just pr 42 "cargo clippy"
just pr 42 "git log --oneline -5"
just pr 42 "git status"

# Sync a PR (combines fetch, merge, format, check, and push)
just sync-pr 42

# Sync a PR with custom commands (e.g., run tests before pushing)
just sync-pr 42 "cargo fmt --all && cargo test && git add -A && git commit --amend --no-edit"

# Sync all open PRs at once
just sync-all-prs
```

### Understanding the Command Flow

1. **`just pr <NUM> "command"`** - Low-level Docker execution
   - Builds Docker image with PR checked out
   - Runs your command inside the container
   - Good for testing and inspection

2. **`just sync-pr <NUM>`** - High-level PR sync (default behavior)
   - Fetches latest from origin
   - Merges origin/main
   - Runs default command (just "date" for testing)
   - Verifies with `cargo fmt --check` and `cargo check`
   - Force pushes to origin

3. **`just sync-pr <NUM> "custom"`** - High-level PR sync (custom)
   - Same as above but runs your custom command after merge
   - Example: `"cargo fmt --all && git add -A && git commit --amend --no-edit"`
   - Useful for fixing formatting issues automatically

4. **`just sync-all-prs`** - Batch operation
   - Runs `sync-pr` for all open PRs with formatting fixes
   - Processes PRs sequentially
   - Reports any failures

### Benefits of Docker-based PR Testing:
- **Isolation**: No impact on your local git state
- **Consistency**: Same environment for all PRs
- **Authentication**: Automatically uses your GitHub token via environment variables
- **Clean slate**: Each command runs in a fresh container
- **Force push safety**: Safe to use `--force` since Docker environment is isolated

## Troubleshooting

### Docker build fails
```bash
# Clean up Docker cache and rebuild
docker system prune -f
docker build -t git-ai .
```

### GitHub authentication issues
```bash
# Re-authenticate with GitHub CLI
gh auth logout
gh auth login

# Verify token works
gh auth status
```

### Push rejected: "stale info" or "fetch first"
This happens when the Docker container's remote state is outdated. The `sync-pr` command now handles this by running `git fetch origin` before merging, and uses `--force` push which is safe for PR branches.

If you still see issues:
```bash
# The updated command already includes fetch
just sync-pr <PR_NUMBER>
```

### Formatting errors after merge
The `sync-pr` and `sync-all-prs` commands automatically:
1. Run `cargo fmt --all` after merging
2. Amend the merge commit with formatting fixes
3. Verify with `cargo fmt --check`

No manual intervention needed for formatting issues!

### Accidentally pushed broken code
```bash
# Checkout the PR locally, fix, and push
gh pr checkout <PR_NUMBER>
# ... make fixes ...
git commit --amend --no-edit
git push origin HEAD --force

# Then verify with Docker
just pr <PR_NUMBER> "cargo test"
```

### Sync fails for specific PR
```bash
# Try syncing just that PR with verbose output
just pr <PR_NUMBER> "git fetch origin && git merge origin/main --no-edit && cargo check"

# If conflicts, resolve manually
gh pr checkout <PR_NUMBER>
git merge origin/main
# ... resolve conflicts ...
git push origin HEAD --force
```

## Related Files

- [Justfile](mdc:Justfile) - Contains the `pr` and `sync-pr` commands
- [Dockerfile](mdc:Dockerfile) - Docker configuration for PR testing
- [src/config.rs](mdc:src/config.rs) - Often contains constants that conflict
- [src/model.rs](mdc:src/model.rs) - Model definitions that may conflict
- [Cargo.toml](mdc:Cargo.toml) - Dependency version conflicts

## Verification Checklist

After syncing each PR:
- [ ] No merge conflict markers remain in code
- [ ] Code compiles: `just pr <NUM> "cargo check"`
- [ ] No new clippy warnings: `just pr <NUM> "cargo clippy"`
- [ ] Tests pass: `just pr <NUM> "cargo test"`
- [ ] Code is formatted: `just pr <NUM> "cargo fmt --all -- --check"`
- [ ] PR branch is pushed to origin
- [ ] GitHub shows PR is up-to-date with base branch

## Quick Reference

```bash
# List open PRs
gh pr list

# Sync all open PRs at once (recommended)
just sync-all-prs

# Sync a single PR with default behavior
just sync-pr <PR_NUMBER>

# Sync a single PR with custom commands
just sync-pr <PR_NUMBER> "cargo fmt --all && cargo test && git add -A && git commit --amend --no-edit"

# Run any command in a PR's Docker environment
just pr <PR_NUMBER> "cargo test"
just pr <PR_NUMBER> "cargo clippy"
just pr <PR_NUMBER> "git log --oneline -5"

# Manually resolve conflicts
gh pr checkout <PR_NUMBER>
git fetch origin
git merge origin/main --no-edit
# ... resolve conflicts ...
cargo fmt --all
git add -A
git commit --no-edit
git push origin HEAD --force
```

## Current Justfile Commands

The [Justfile](mdc:Justfile) contains these PR-related commands:

```justfile
# Low-level: Run any command in a PR's Docker container
pr PR_NUMBER CMD:
    docker build --build-arg PR_NUMBER={{PR_NUMBER}} --build-arg GH_TOKEN=$(gh auth token) --target pr-tester -t git-ai-pr-tester .
    docker run -i --rm -e GITHUB_TOKEN=$(gh auth token) git-ai-pr-tester bash -c "{{CMD}}"

# Sync a single PR with origin/main
sync-pr PR_NUM CMD = "date":
    just pr {{PR_NUM}} "git fetch origin && git merge origin/main --no-edit && {{CMD}} && cargo fmt --check && cargo check && git push origin --force"

# Sync all open PRs with origin/main
sync-all-prs:
    just sync-pr 74 "cargo fmt --all && git add -A && git commit --amend --no-edit"
    just sync-pr 75 "cargo fmt --all && git add -A && git commit --amend --no-edit"
    just sync-pr 76 "cargo fmt --all && git add -A && git commit --amend --no-edit"
    # ... (continues for all open PRs)
```

**Note**: Update the `sync-all-prs` recipe when PRs are opened/closed by running:
```bash
gh pr list --json number --jq '.[].number'
```

{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/bin/hook.rs c/src/bin/hook.rs\nindex da104d3..6c07a40 100644\n--- c/src/bin/hook.rs\n+++ c/src/bin/hook.rs\n@@ -51,0 +52 @@ async fn main() -> Result<()> {\n  let pb1 = pb.clone();\n@@ -53,8 +54,2 @@ async fn main() -> Result<()> {\n    let str = patch.to_string();\n    println!(\"Patch: {}\", str);\n    let commit_message = commit::generate(str, None).await.context(\"Failed to generate commit message\")?.response;\n\n    args\n      .commit_msg_file\n      .write(commit_message.trim().to_string())\n      .context(\"Failed to write commit message\")?;\n    let commit = commit::generate(patch.to_string(), None, pb1.into()).await?.response;\n    args.commit_msg_file.write(commit.trim().to_string()).unwrap();\ndiff --git c/src/commit.rs c/src/commit.rs\nindex 3ccae5f..a65f269 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -9,0 +10 @@ use async_openai::error::OpenAIError;\nuse indicatif::ProgressBar;\n@@ -53,4 +53,0 @@ fn instruction(language: String, max_length_of_commit: usize) -> String {\nfn user_prompt(diff: String) -> String {\n  format!(\"Staged changes: {diff}\").split_whitespace().collect::<Vec<&str>>().join(\" \")\n}\n\n@@ -184 +181,5 @@ impl Run {\npub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIResponse, ChatError> {\npub async fn generate(\n  diff: String, session: Option<Session>, progressbar: Option<ProgressBar>\n) -> Result<OpenAIResponse, ChatError> {\n  progressbar.clone().map(|pb| pb.set_message(\"Creating connection...\"));\n\n@@ -186 +187 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n  connection.create_message(&user_prompt(diff)).await?;\n  connection.create_message(&diff).await?;\n@@ -207 +208 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n        log::debug!(\"--- Run InProgress\");\n        progressbar.clone().map(|pb| pb.set_message(\"In progress...\"));\n@@ -210 +211 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n        log::debug!(\"--- Run Queued\");\n        progressbar.clone().map(|pb| pb.set_message(\"Queued...\"));\n@@ -213 +214 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n        log::debug!(\"--- Run Cancelling\");\n        progressbar.clone().map(|pb| pb.set_message(\"Cancelling...\"));\ndiff --git c/src/examples.rs c/src/examples.rs\nindex d9984b6..f7b0f52 100644\n--- c/src/examples.rs\n+++ c/src/examples.rs\n@@ -80 +80 @@ pub async fn run(_args: &clap::ArgMatches) -> Result<()> {\n    let commit_message = commit::generate(commit.show(&repo, max_tokens)?, None).await?.response;\n    let commit_message = commit::generate(commit.show(&repo, max_tokens)?, None, None).await?.response;\n",
      "role": "user"
    },
    {
      "content": "Pass progressbar",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex 11bceaa..3ccae5f 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -170 +170 @@ impl Run {\n  pub async fn status(&self) -> Result<RunStatus, ChatError> {\n  pub async fn pull_status(&self) -> Result<RunStatus, ChatError> {\n@@ -190 +190 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n    match run.status().await? {\n    match run.pull_status().await? {\n",
      "role": "user"
    },
    {
      "content": "Clean up",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex c466fd4..11bceaa 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -57,10 +56,0 @@ fn user_prompt(diff: String) -> String {\nfn client() -> Result<Client<OpenAIConfig>, ChatError> {\n  let api_key = config::APP\n    .openai_api_key\n    .clone()\n    .context(\"Failed to get OpenAI API key, please run `git-ai config set openapi-api-key <api-key>`\")?;\n\n  let config = OpenAIConfig::new().with_api_key(api_key);\n  Ok(Client::with_config(config))\n}\n\n@@ -118 +108 @@ impl Connection {\n  pub fn new(session: Session) -> Result<Self, ChatError> {\n  pub async fn new(session: Option<Session>) -> Result<Self, ChatError> {\n@@ -125,0 +116,5 @@ impl Connection {\n    let session = match session {\n      Some(session) => session,\n      None => Session::new_from_client(&client).await?\n    };\n\n@@ -135 +130,3 @@ impl Connection {\n    Ok(Run { id: run.id, connection: self.clone() })\n    Ok(Run {\n      id: run.id, connection: self.clone()\n    })\n@@ -155,0 +153,8 @@ impl Connection {\n\n  async fn into_response(&self) -> Result<OpenAIResponse, ChatError> {\n    let message = self.last_message().await?;\n    let response = OpenAIResponse {\n      response: message, session: self.session.clone()\n    };\n    Ok(response)\n  }\n@@ -180,8 +185 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n  let client = client()?;\n\n  let session = match session {\n    Some(session) => session,\n    None => Session::new_from_client(&client).await?\n  };\n\n  let connection = Connection::new(session.clone())?;\n  let connection = Connection::new(session).await?;\n@@ -194 +192 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n        break connection.last_message().await;\n        break connection.into_response().await;\n@@ -222,4 +220 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n  Ok(OpenAIResponse {\n    response: result?,\n    session\n  })\n  result\n",
      "role": "user"
    },
    {
      "content": "Clean up",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex b39c89c..c466fd4 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -151 +151 @@ impl Connection {\n  async fn post_message(&self, message: &str) -> Result<(), ChatError> {\n  async fn create_message(&self, message: &str) -> Result<(), ChatError> {\n@@ -187 +186,0 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n  let message = user_prompt(diff);\n@@ -189 +188 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n  connection.post_message(&message).await?;\n  connection.create_message(&user_prompt(diff)).await?;\n",
      "role": "user"
    },
    {
      "content": "Clean up",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex e83623c..b39c89c 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -5 +5 @@ use async_openai::types::{\n  AssistantObject, AssistantTools, AssistantToolsCode, CreateAssistantRequestArgs, CreateMessageRequestArgs, CreateRunRequestArgs, CreateThreadRequestArgs, MessageContent, MessageObject, RunObject, RunStatus\n  AssistantObject, AssistantTools, AssistantToolsCode, CreateAssistantRequestArgs, CreateMessageRequestArgs, CreateRunRequestArgs, CreateThreadRequestArgs, MessageContent, RunStatus\n",
      "role": "user"
    },
    {
      "content": "Clean up",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex edba80a..e83623c 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -138,5 +138 @@ impl Connection {\n  async fn run_status(&self, run_id: &str) -> Result<RunStatus, ChatError> {\n    Ok(self.client.threads().runs(&self.session.thread_id).retrieve(run_id).await?.status)\n  }\n\n  async fn run_message(&self) -> Result<MessageObject, ChatError> {\n  async fn last_message(&self) -> Result<String, ChatError> {\n@@ -146 +142,7 @@ impl Connection {\n    Ok(self.client.threads().messages(&self.session.thread_id).retrieve(&message_id).await?)\n    let message = self.client.threads().messages(&self.session.thread_id).retrieve(&message_id).await?;\n    let content = message.content.get(0).unwrap();\n    let MessageContent::Text(text) = &content else {\n      return Err(ChatError::OpenAIError(\"Message content is not text\".to_string()));\n    };\n\n    Ok(text.text.value.clone())\n@@ -193,8 +195 @@ pub async fn generate(diff: String, session: Option<Session>) -> Result<OpenAIRe\n        let message = connection.run_message().await?;\n        let content = message.content.get(0).unwrap();\n\n        let MessageContent::Text(text) = &content else {\n          break Err(ChatError::OpenAIError(\"Message content is not text\".to_string()));\n        };\n\n        break Ok(text.text.value.clone());\n        break connection.last_message().await;\n",
      "role": "user"
    },
    {
      "content": "Innr messages",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/rustfmt.toml c/rustfmt.toml\nindex 7f8709c..0586687 100644\n--- c/rustfmt.toml\n+++ c/rustfmt.toml\n@@ -26,2 +26,2 @@ hard_tabs = false\nmax_width = 90\nchain_width = 80\nmax_width = 120\nchain_width = 120\ndiff --git c/src/commit.rs c/src/commit.rs\nindex 1900345..edba80a 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -54,4 +54 @@ fn user_prompt(diff: String) -> String {\n  format!(\"Staged changes: {diff}\")\n    .split_whitespace()\n    .collect::<Vec<&str>>()\n    .join(\" \")\n  format!(\"Staged changes: {diff}\").split_whitespace().collect::<Vec<&str>>().join(\" \")\n@@ -87,0 +85 @@ impl Session {\n#[derive(Debug, Clone, PartialEq)]\n@@ -93,3 +91 @@ pub struct OpenAIResponse {\nasync fn create_assistant(\n  client: &Client<OpenAIConfig>\n) -> Result<AssistantObject, ChatError> {\nasync fn create_assistant(client: &Client<OpenAIConfig>) -> Result<AssistantObject, ChatError> {\n@@ -114,0 +111 @@ async fn create_assistant(\n#[derive(Debug, Clone)]\n@@ -122,3 +119,4 @@ impl Connection {\n    let api_key = config::APP.openai_api_key.clone().context(\n      \"Failed to get OpenAI API key, please run `git-ai config set openapi-api\"\n    )?;\n    let api_key = config::APP\n      .openai_api_key\n      .clone()\n      .context(\"Failed to get OpenAI API key, please run `git-ai config set openapi-api\")?;\n@@ -134,5 +132,4 @@ impl Connection {\n  async fn create_run(&self) -> Result<RunObject, ChatError> {\n    let request = CreateRunRequestArgs::default()\n      .assistant_id(self.session.clone().assistant_id)\n      .build()?;\n    Ok(self.client.threads().runs(&self.session.thread_id).create(request).await?)\n  async fn create_run(&self) -> Result<Run, ChatError> {\n    let request = CreateRunRequestArgs::default().assistant_id(self.session.clone().assistant_id).build()?;\n    let run = self.client.threads().runs(&self.session.thread_id).create(request).await?;\n    Ok(Run { id: run.id, connection: self.clone() })\n@@ -142,9 +139 @@ impl Connection {\n    Ok(\n      self\n        .client\n        .threads()\n        .runs(&self.session.thread_id)\n        .retrieve(run_id)\n        .await?\n        .status\n    )\n    Ok(self.client.threads().runs(&self.session.thread_id).retrieve(run_id).await?.status)\n@@ -153 +142 @@ impl Connection {\n  async fn run_message(&self, run_id: &str) -> Result<MessageObject, ChatError> {\n  async fn run_message(&self) -> Result<MessageObject, ChatError> {\n@@ -155,2 +144 @@ impl Connection {\n    let response =\n      self.client.threads().messages(&self.session.thread_id).list(&query).await?;\n    let response = self.client.threads().messages(&self.session.thread_id).list(&query).await?;\n@@ -158,8 +146 @@ impl Connection {\n    Ok(\n      self\n        .client\n<truncated>",
      "role": "user"
    },
    {
      "content": "Add run struct",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex 8615369..1900345 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -166,0 +167,7 @@ impl Connection {\n\n  async fn post_message(&self, message: &str) -> Result<(), ChatError> {\n    let message =\n      CreateMessageRequestArgs::default().role(\"user\").content(message).build()?;\n    self.client.threads().messages(&self.session.thread_id).create(message).await?;\n    Ok(())\n  }\n@@ -181,7 +188 @@ pub async fn generate(\n  let message = CreateMessageRequestArgs::default()\n    .role(\"user\")\n    .content(user_prompt(diff))\n    .build()?;\n\n  client.threads().messages(&thread_id).create(message).await?;\n\n  let message = user_prompt(diff);\n@@ -188,0 +190 @@ pub async fn generate(\n  connection.post_message(&thread_id, &message).await?;\n",
      "role": "user"
    },
    {
      "content": "Add run message",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex 9b4cc5f..8615369 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -5 +5 @@ use async_openai::types::{\n  AssistantObject, AssistantTools, AssistantToolsCode, CreateAssistantRequestArgs, CreateMessageRequestArgs, CreateRunRequestArgs, CreateThreadRequestArgs, MessageContent, RunObject, RunStatus\n  AssistantObject, AssistantTools, AssistantToolsCode, CreateAssistantRequestArgs, CreateMessageRequestArgs, CreateRunRequestArgs, CreateThreadRequestArgs, MessageContent, MessageObject, RunObject, RunStatus\n@@ -122 +122,3 @@ impl Connection {\n    let api_key = config::APP.openai_api_key.clone().context(\"Failed to get OpenAI API key, please run `git-ai config set openapi-api\")?;\n    let api_key = config::APP.openai_api_key.clone().context(\n      \"Failed to get OpenAI API key, please run `git-ai config set openapi-api\"\n    )?;\n@@ -140 +142,24 @@ impl Connection {\n    Ok(self.client.threads().runs(&self.session.thread_id).retrieve(run_id).await?.status)\n    Ok(\n      self\n        .client\n        .threads()\n        .runs(&self.session.thread_id)\n        .retrieve(run_id)\n        .await?\n        .status\n    )\n  }\n\n  async fn run_message(&self, run_id: &str) -> Result<MessageObject, ChatError> {\n    let query = [(\"limit\", \"1\")];\n    let response =\n      self.client.threads().messages(&self.session.thread_id).list(&query).await?;\n    let message_id = response.data.get(0).unwrap().id.clone();\n    Ok(\n      self\n        .client\n        .threads()\n        .messages(&self.session.thread_id)\n        .retrieve(&message_id)\n        .await?\n    )\n@@ -147 +171,0 @@ pub async fn generate(\n  let query = [(\"limit\", \"1\")];\n@@ -170,3 +194 @@ pub async fn generate(\n        let response = client.threads().messages(&thread_id).list(&query).await?;\n        let message_id = response.data.get(0).unwrap().id.clone();\n        let message = client.threads().messages(&thread_id).retrieve(&message_id).await?;\n        let message = connection.run_message(&run.id).await?;\n",
      "role": "user"
    },
    {
      "content": "Add run message",
      "role": "assistant"
    }
  ]
}{
  "messages": [
    {
      "content": "Your role is to create concise git commit messages based on user-provided git diffs. When crafting these messages: - Focus on detailing the changes and reasons behind them, ensuring clarity and relevance. - Avoid including irrelevant or unnecessary details, such as translations, to maintain focus on the core changes. Your responses should be direct and immediately usable in a git commit, crafted in present tense to fit git conventions. You work primarily with git diffs, interpreting them to generate meaningful commit messages that succinctly summarize the changes.",
      "role": "system"
    },
    {
      "content": "diff --git c/src/commit.rs c/src/commit.rs\nindex 5149118..9b4cc5f 100644\n--- c/src/commit.rs\n+++ c/src/commit.rs\n@@ -137,0 +138,4 @@ impl Connection {\n\n  async fn run_status(&self, run_id: &str) -> Result<RunStatus, ChatError> {\n    Ok(self.client.threads().runs(&self.session.thread_id).retrieve(run_id).await?.status)\n  }\n@@ -164 +168 @@ pub async fn generate(\n    match client.threads().runs(&thread_id).retrieve(&run.id).await?.status {\n    match connection.run_status(&run.id).await? {\n",
      "role": "user"
    },
    {
      "content": "Add run status",
      "role": "assistant"
    }
  ]
}
name: Build & Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: write
  packages: write

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  ACTIONS_RUNTIME_TOKEN: dummy
  CARGO_TERM_COLOR: always
  RUST_CACHE_VERSION: 1

jobs:
  artifact:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    steps:
      - name: Check if should skip this matrix combination
        id: check_skip
        run: |
          # Skip macOS targets when running in act (Linux containers)
          if [[ -n "${ACT}" && "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping macOS target in act environment"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v4
        if: steps.check_skip.outputs.skip != 'true'

      - name: Install Node.js for act
        if: steps.check_skip.outputs.skip != 'true' && env.ACT == 'true'
        run: |
          # Install Node.js manually in act container
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs
          # Verify installation
          node --version
          npm --version

      - name: Cache cargo registry
        if: steps.check_skip.outputs.skip != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ env.RUST_CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ env.RUST_CACHE_VERSION }}-
            ${{ runner.os }}-cargo-registry-${{ env.RUST_CACHE_VERSION }}-

      - name: Cache cargo target
        if: steps.check_skip.outputs.skip != 'true'
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ env.RUST_CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ env.RUST_CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ env.RUST_CACHE_VERSION }}-

      - name: Cache Rust toolchain
        if: steps.check_skip.outputs.skip != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rust-toolchain-nightly-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-rust-toolchain-nightly-
            ${{ runner.os }}-rust-toolchain-

      - name: Install Node
        if: steps.check_skip.outputs.skip != 'true'
        uses: actions/setup-node@v4

      - name: Setup Rust
        if: steps.check_skip.outputs.skip != 'true'
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Check if running in act
        id: check_act
        if: steps.check_skip.outputs.skip != 'true'
        run: |
          if [[ -n "${ACT}" ]]; then
            echo "running_in_act=true" >> $GITHUB_OUTPUT
          else
            echo "running_in_act=false" >> $GITHUB_OUTPUT
          fi

      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Add x86_64-unknown-linux-musl target
        if: matrix.target == 'x86_64-unknown-linux-musl' && steps.check_act.outputs.running_in_act != 'true' && steps.check_skip.outputs.skip != 'true'
        run: |
          rustup target add x86_64-unknown-linux-musl
          sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install Dependencies for musl Target
        if: matrix.target == 'x86_64-unknown-linux-musl' && steps.check_act.outputs.running_in_act != 'true' && steps.check_skip.outputs.skip != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev perl make pkg-config
          # Set up environment for musl cross-compilation
          echo "CC_x86_64_unknown_linux_musl=musl-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV
          # Configure OpenSSL build to avoid -m64 flag
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-musl" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV

      - name: Skip musl build in act
        if: matrix.target == 'x86_64-unknown-linux-musl' && steps.check_act.outputs.running_in_act == 'true' && steps.check_skip.outputs.skip != 'true'
        run: |
          echo "Skipping musl build in act due to cross-compilation issues"
          mkdir -p bin
          echo '#!/bin/sh' > bin/git-ai
          echo 'echo "Placeholder for musl build in act"' >> bin/git-ai
          chmod +x bin/git-ai
          cp bin/git-ai bin/git-ai-hook

      - name: Install Dependencies for Linux Target
        if: matrix.target == 'x86_64-unknown-linux-gnu' && steps.check_skip.outputs.skip != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build for target
        if: ${{ !(matrix.target == 'x86_64-unknown-linux-musl' && steps.check_act.outputs.running_in_act == 'true') && steps.check_skip.outputs.skip != 'true' }}
        run: |
          cargo build \
            -Z unstable-options \
            --profile release-with-debug \
            --artifact-dir bin \
            --target ${{ matrix.target }}

      - name: Package artifacts
        if: steps.check_skip.outputs.skip != 'true'
        run: |
          mkdir -p dist
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            cp bin/git-ai.exe dist/
            cd dist
            zip -r ../git-ai-${{ matrix.target }}.zip .
            cd ..
          else
            cp bin/git-ai dist/
            cd dist
            tar -czf ../git-ai-${{ matrix.target }}.tar.gz .
            cd ..
          fi

      - name: Upload packaged artifacts
        if: steps.check_skip.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: git-ai-${{ matrix.target }}-package
          if-no-files-found: error
          path: git-ai-${{ matrix.target }}.*

      - name: Upload raw artifacts
        if: steps.check_skip.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: git-ai-${{ matrix.target }}-raw
          if-no-files-found: error
          path: bin/git-*

  release:
    runs-on: macos-latest
    needs: artifact
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-registry-${{ env.RUST_CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ env.RUST_CACHE_VERSION }}-

      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-release-${{ env.RUST_CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-release-${{ env.RUST_CACHE_VERSION }}-

      - name: Cache cargo-binstall
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-binstall
          key: ${{ runner.os }}-cargo-binstall-${{ env.RUST_CACHE_VERSION }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall

      - name: Install cargo-release
        run: cargo binstall -y cargo-release

      - name: Git config
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

      - name: Checkout main
        run: git checkout main

      - name: Build & publish
        run: cargo release minor --no-confirm --execute --allow-branch main

      - name: Create temporary directory for artifacts
        run: mkdir -p ${{ runner.temp }}/artifacts

      - name: Download all packaged artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: git-ai-*-package
          path: ${{ runner.temp }}/artifacts
          merge-multiple: true

      - name: Move artifacts to packages directory
        run: |
          mkdir -p packages
          # Move all artifacts from temp to packages directory
          mv ${{ runner.temp }}/artifacts/* packages/

      - name: Get version
        id: app
        run: echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

      - name: Generate cargo-binstall metadata.json
        run: |
          cat > metadata.json << EOF
          {
            "name": "git-ai",
            "version": "${{ steps.app.outputs.version }}",
            "package": {
              "targets": [
                {
                  "name": "git-ai",
                  "bins": ["git-ai"]
                }
              ],
              "platforms": {
                "x86_64-unknown-linux-gnu": {
                  "bins": {
                    "git-ai": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.app.outputs.version }}/git-ai-x86_64-unknown-linux-gnu.tar.gz"
                  }
                },
                "x86_64-unknown-linux-musl": {
                  "bins": {
                    "git-ai": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.app.outputs.version }}/git-ai-x86_64-unknown-linux-musl.tar.gz"
                  }
                },
                "x86_64-apple-darwin": {
                  "bins": {
                    "git-ai": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.app.outputs.version }}/git-ai-x86_64-apple-darwin.tar.gz"
                  }
                },
                "aarch64-apple-darwin": {
                  "bins": {
                    "git-ai": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.app.outputs.version }}/git-ai-aarch64-apple-darwin.tar.gz"
                  }
                }
              }
            }
          }
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.app.outputs.version }}
          fail_on_unmatched_files: false
          files: |
            packages/git-ai-*.tar.gz
            packages/git-ai-*.zip
            metadata.json
          generate_release_notes: true

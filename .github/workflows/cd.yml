name: CD

on:
  push:
    branches: [main]
    tags: ["v*"]
  release:
    types: [prereleased, released]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: write
  packages: write

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  ACTIONS_RUNTIME_TOKEN: dummy
  CARGO_TERM_COLOR: always

jobs:
  # Version bump and tag creation on main push
  #
  # On: Push to main
  # Do: 1. Bump version using cargo-bump
  #     2. Push to tag and changes to main
  version-bump:
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1

      - name: Configure git
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

      - name: Install cargo-bump
        run: cargo install cargo-bump

      - name: Bump version and create tag
        run: |
          cargo bump patch --git-tag
          git commit -a --amend --no-edit
          git push origin HEAD --tags

  # Build artifacts when release is created in draft
  #
  # On: Draft release is created
  # Do: 1. Build artifacts for all platforms
  #     2. Upload artifacts to draft release
  build-artifacts:
    if: github.event.release.draft
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Add x86_64-unknown-linux-musl target
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          rustup target add x86_64-unknown-linux-musl
          sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install Dependencies for musl Target
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build for target
        run: |
          cargo build \
            -Z unstable-options \
            --profile dev \
            --artifact-dir bin \
            --target ${{ matrix.target }}

      - name: Zip artifacts
        run: zip -r git-ai-${{ matrix.target }}.zip bin/git-*

      - name: Upload artifacts
        run: gh release upload v${{ github.event.release.tag_name }} git-ai-${{ matrix.target }}.zip

  mark-release-as-ready:
    needs: build-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Mark release as ready
        run: gh release edit v${{ github.event.release.tag_name }} --draft=false

  # Create a draft release
  #
  # On: Tag is created
  # Do: 1. Create a draft release
  create-draft-release:
    if: contains(github.event.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Download all artifacts
      #   run: gh run download ${{ github.run_id }}

      # - name: Zip each downloaded directory
      #   run: |
      #     for dir in $(ls -d git-ai-*); do
      #       tar -czf ${dir}.tar.gz ${dir}
      #     done

      - name: Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true

  # Publish to crates.io when release is published (not draft)
  #
  # On: Release is published
  # Do: 1. Publish to crates.io
  publish-to-crates:
    if: github.event.release.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1

      - name: Publish to crates.io
        run: cargo publish --allow-dirty

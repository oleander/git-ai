name: CD

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  ACTIONS_RUNTIME_TOKEN: dummy
  CARGO_TERM_COLOR: always

jobs:
  artifact:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    if: ! startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Add Specific Targets
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            rustup target add x86_64-unknown-linux-musl
            sudo apt-get update && sudo apt-get install -y musl-tools
          elif [[ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]]; then
            rustup target add wasm32-unknown-unknown
          fi

      - name: Install Dependencies for musl Target
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build for target
        run: |
          cargo build \
            -Z unstable-options \
            --profile dev \
            --artifact-dir bin \
            --target ${{ matrix.target }}

      - name: Upload and compress artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-ai-${{ matrix.target }}
          if-no-files-found: error
          path: |
            bin/git-ai
            bin/git-ai-hook

  release:
    runs-on: ubuntu-latest
    needs: artifact
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal

      - name: Setup Git
        run: |
          git config user.name "Linus Oleander"
          git config user.email "oleander@users.noreply.github.com"

      - name: Install cargo-bump
        run: cargo install cargo-bump

      - name: Bump version
        run: |
          cargo bump patch --git-tag
          cargo check

      - name: Commit Version Bump
        run: git commit -a --amend --no-edit

      - name: Publish to crates.io
        run: cargo publish --allow-dirty

      - name: Push to origin
        run: git push origin HEAD --tags

  precompile:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        run: gh run download ${{ github.run_id }}

      - name: Zip each downloaded directory
        run: |
          for dir in $(ls -d git-ai-*); do
            tar -czf ${dir}.tar.gz ${dir}
          done

      - name: Uploads compressed artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.ref_name }}
          fail_on_unmatched_files: true
          files: git-ai-*.tar.gz

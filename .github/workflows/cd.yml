name: CD

on:
  pull_request:               # CI + (optional) publish
  push:
    tags: ['v*']              # create GitHub Release
  workflow_dispatch:          # manual runs if you want

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions:  write
  packages: write

env:
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  GH_TOKEN:              ${{ secrets.GH_TOKEN }}
  ACTIONS_RUNTIME_TOKEN: dummy
  CARGO_TERM_COLOR:      always

# ─────────────────────────────────────────────────────────────
# 1.  CI build for every PR   (all requested targets)
# ─────────────────────────────────────────────────────────────
jobs:
  artifact:
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo + target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key:  ${{ runner.os }}-${{ matrix.target }}-cargo-${{
                 hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Extra Linux deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Add Apple target (cross-compile to ARM)
        if: startsWith(matrix.target, 'aarch64-apple')
        run: rustup target add aarch64-apple-darwin

      - name: Build
        run: |
          cargo build \
            -Z unstable-options \
            --profile release-with-debug \
            --artifact-dir bin \
            --target ${{ matrix.target }}

      - uses: actions/upload-artifact@v4
        with:
          name: git-ai-${{ matrix.target }}
          if-no-files-found: error
          path: bin/git-*

# ─────────────────────────────────────────────────────────────
# 2.  Publish crate **from PR** (same-repo branches only)
# ─────────────────────────────────────────────────────────────
  publish-crate:
    needs: artifact
    if: >
      github.event_name == 'pull_request' &&
      github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key:  ${{ runner.os }}-cargo-${{
                 hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-release
        run: cargo binstall -y cargo-release

      - name: Publish & tag
        run: cargo release patch --no-confirm --execute

# ─────────────────────────────────────────────────────────────
# 3.  GitHub Release (runs on the tag push)
# ─────────────────────────────────────────────────────────────
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo + target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key:  ${{ runner.os }}-${{ matrix.target }}-cargo-${{
                 hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Extra Linux deps
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Add Apple target (cross-compile to ARM)
        if: startsWith(matrix.target, 'aarch64-apple')
        run: rustup target add aarch64-apple-darwin

      - name: Build release binary
        run: |
          cargo build --release --locked --target ${{ matrix.target }}
          mkdir dist
          cp target/${{ matrix.target }}/release/git-ai dist/
          tar -C dist -czf \
            git-ai-${{ matrix.target }}.tar.gz git-ai

      - uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target }}
          path: git-ai-${{ matrix.target }}.tar.gz
          if-no-files-found: error

  publish-release:
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all target artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create / update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          files: dist/**/*.tar.gz

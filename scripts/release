#!/usr/bin/env fish

# Function to increment the version
function bump_version
  set -l current_version (cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')
  if test -z "$current_version"
    echo "=> Failed to get version from cargo metadata"
    exit 1
  end
  set -l IFS "."
  set -l parts $current_version
  set -l new_version "$parts[1].$parts[2].(math "$parts[3] + 1")"
  echo $new_version
end

# Fetch the new version
set new_version (bump_version)
if test -z "$new_version"
  echo "=> Failed to bump version"
  exit 1
end

# Update Cargo.toml with the new version
sed -i "s/^version = \".*\"/version = \"$new_version\"/" Cargo.toml
if test $status -ne 0
  echo "=> Failed to update version in Cargo.toml"
  exit 1
end

echo "=> Running tests..."
if not cargo test
  echo "=> Tests have to pass before releasing"
  exit 1
end

# Attempt to update dependencies aggressively
if not cargo update --aggressive
  echo "=> Please bump the version in Cargo.toml before releasing"
  exit 1
end

# Add changes to git, auto-commit, and tag the release
if not git add Cargo.lock Cargo.toml
  echo "=> Could not add Cargo.lock and Cargo.toml to git"
  echo "=> Make sure to bump the version in Cargo.toml before releasing"
  exit 1
end

if not git commit -m "Update dependencies for version $new_version"
  echo "=> Nothing to commit"
  echo "=> Make sure to bump the version in Cargo.toml before releasing"
  exit 1
end

# Create an annotated tag for the release
if not git tag -a "v$new_version" -m "Release v$new_version"
  echo "=> Could not create tag: v$new_version"
  echo "=> Make sure to bump the version in Cargo.toml before releasing"
  exit 1
end

# Push the changes and tags to the main branch
if not git push origin "v$new_version"
  echo "=> Git push failed for tag: v$new_version"
  exit 1
end

if not git push origin main
  echo "=> Git push failed for main branch"
  exit 1
end

if not git push --tags
  echo "=> Git push failed for tags"
  exit 1
end

echo "=> Successfully released version $new_version!"